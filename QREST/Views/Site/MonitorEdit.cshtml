@model QREST.Models.vmSiteMonitorEdit
@{
    ViewBag.Title = "Edit Monitor";
}

@using (Html.BeginForm("MonitorEdit", "Site", FormMethod.Post, new { @id = "norepostform", role = "form" }))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.MONITOR_IDX)
    @Html.HiddenFor(model => model.SITE_IDX)
    @Html.HiddenFor(model => model.PAR_METHOD_IDX)
    <div class="row">
        <div class="col-md-6">
            <section class="panel panel-qrest">
                <header class="panel-heading font-bold">Monitor Details</header>
                <div class="panel-body">

                    @if (Model != null)
                    {
                    <div class="row">
                        @if (Model.MONITOR_IDX == null)
                        {
                            <div class="col-md-9">
                                <label>Parameter / Method</label>
                                <div class="input-group m-b">
                                    <span class="input-group-btn">
                                        <a id="add-it" href="#modal-form" data-toggle="modal" class="btn btn-info"><i class="fa fa-plus"></i> Search</a>
                                    </span>
                                    <input id="txtParMethodTemp" type="text" class="form-control" readonly="readonly">
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Parameter</label>
                                    @Html.TextBoxFor(model => model.PAR_NAME, new { @class = "form-control", @readonly = "readonly" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Method</label>
                                    @Html.TextBoxFor(model => model.METHOD_CODE, new { @class = "form-control", @readonly = "readonly" })
                                </div>
                            </div>
                        }
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>Data Collection Unit</label>
                                @Html.DropDownListFor(model => model.COLLECT_UNIT_CODE, Model.ddl_Unit, "", new { @class = "form-control" })
                            </div>
                        </div>

                    </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>POC</label>
                                    @Html.TextBoxFor(model => model.POC, new { @class = "form-control", @maxlength = "4" })
                                    @Html.ValidationMessageFor(model => model.POC)
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Duration</label>
                                    @Html.DropDownListFor(model => model.DURATION_CODE, Model.ddl_Ref_Duration, "", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.DURATION_CODE)
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Collection Frequency</label>
                                    @Html.DropDownListFor(model => model.COLLECT_FREQ_CODE, Model.ddl_Ref_Coll_Freq, "", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.COLLECT_FREQ_CODE)
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </section>
            <p>
                <button id="btnSave" type="submit" disabled class="btn btn-primary">Save</button>
                <a class=" btn btn-default" href="@Url.Action("SiteEdit", new { id = Model.SITE_IDX } )">Back to Site List</a>
            </p>
        </div>

        @if (Model != null && Model.MONITOR_IDX != null)
        {
        <div class="col-md-6">
            <section class="panel panel-qrest">
                <header class="panel-heading font-bold">Alerts</header>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Min</label>
                                <div class="input-group m-b">
                                    @Html.TextBoxFor(model => model.ALERT_MIN_VALUE, new { @class = "form-control", @maxlength = "6" })
                                    <span id="unit1"  class="input-group-addon"></span>
                                </div>
                                @Html.ValidationMessageFor(model => model.ALERT_MIN_VALUE)
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Max</label>
                                <div class="input-group m-b">
                                    @Html.TextBoxFor(model => model.ALERT_MAX_VALUE, new { @class = "form-control", @maxlength = "6" })
                                    <span id="unit2"  class="input-group-addon">unit</span>
                                </div>
                                @Html.ValidationMessageFor(model => model.ALERT_MAX_VALUE)
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Amount Change</label>
                                <div class="input-group m-b">
                                    @Html.TextBoxFor(model => model.ALERT_AMT_CHANGE, new { @class = "form-control", @maxlength = "5" })
                                    <span id="unit3" class="input-group-addon">unit</span>
                                </div>
                                @Html.ValidationMessageFor(model => model.ALERT_AMT_CHANGE)
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label># Stuck Values</label>
                                @Html.TextBoxFor(model => model.ALERT_STUCK_REC_COUNT, new { @class = "form-control", @maxlength = "2" })
                                @Html.ValidationMessageFor(model => model.ALERT_STUCK_REC_COUNT)
                            </div>
                        </div>
                    </div>
                </div>
            </section>

        </div>
        }
    </div>

}

<!-- START MODAL FORM  -->
<div class="modal fade" id="modal-form" style="display: none;" aria-hidden="true">
    <div class="modal-dialog" style="width:90%">
        <div class="modal-content">
            <div class="modal-header">
                <h4 style="float: left" class="modal-title">Search and Select AQS Parameter / Method</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table id="gridData" class="table table-striped table-bordered" data-ride="datatables" style="width:100%">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th></th>
                                <th>Par</th>
                                <th>Par Name</th>
                                <th>Recording Mode</th>
                                <th>Method</th>
                                <th>Collection</th>
                                <th>Analysis</th>
                                <th>Ref Method</th>
                                <th>Equivalent Method</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<!-- END MODAL FORM -->


@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/datatables")
    @Scripts.Render("~/bundles/areyousure")

    <script type="text/javascript">
        // Enable dirtyforms
        $('#norepostform').dirtyForms();
        // Enable/disable the submit button when the state transitions between dirty and clean.
        $('form').on('dirty.dirtyforms clean.dirtyforms', function (ev) {
            if (ev.type === 'dirty') {
                $("#btnSave").prop("disabled", false);
            } else {
                $("#btnSave").prop("disabled", true);
            }
        });

        $(document).ready(function () {

            // datatable initialization
            $("#gridData").DataTable({
                "responsive": true,
                "serverSide": true,
                "processing": true,
                "orderMulti": false,
                "lengthChange": false,
                "paging": true,
                "pageLength": 10,
                "pagingType": "full_numbers",
                "info": false,
                "searching": true,
                "ajax": {
                    "url": "@Url.Action("RefParMethodData", "Site")",
                    "type": "POST",
                    "datatype": "json"
                },
                "columnDefs":
                    [{
                        "targets": [0],
                        "visible": false,
                    },
                    {
                        "targets": [1],
                        "orderable" : false
                    }],
                "columns": [
                    { "data": "T_QREST_REF_PAR_METHODS.PAR_METHOD_IDX", "name": "T_QREST_REF_PAR_METHODS.PAR_METHOD_IDX", "autoWidth": true },
                    {
                        "render": function (data, type, row) {
                            return '<a data-id="' + row.T_QREST_REF_PAR_METHODS.PAR_METHOD_IDX
                                + '" data-par="' + row.PAR_NAME
                                + '" data-unit="' + row.T_QREST_REF_PAR_METHODS.STD_UNIT_CODE
                                + '" data-meth="' + row.T_QREST_REF_PAR_METHODS.METHOD_CODE + '" class="btn btn-rounded btn-xs btn-primary par-meth-sel" style="display: inline-block;"> <i class="fa fa-plus"></i> Select</a>';
                        }
                    },
                    { "data": "T_QREST_REF_PAR_METHODS.PAR_CODE", "name": "T_QREST_REF_PAR_METHODS.PAR_CODE", "autoWidth": true },
                    { "data": "PAR_NAME", "name": "PAR_NAME", "autoWidth": true },
                    { "data": "T_QREST_REF_PAR_METHODS.RECORDING_MODE", "name": "T_QREST_REF_PAR_METHODS.RECORDING_MODE", "autoWidth": true },
                    { "data": "T_QREST_REF_PAR_METHODS.METHOD_CODE", "name": "T_QREST_REF_PAR_METHODS.METHOD_CODE", "autoWidth": true },
                    { "data": "T_QREST_REF_PAR_METHODS.COLLECTION_DESC", "name": "T_QREST_REF_PAR_METHODS.COLLECTION_DESC", "autoWidth": true },
                    { "data": "T_QREST_REF_PAR_METHODS.ANALYSIS_DESC", "name": "T_QREST_REF_PAR_METHODS.ANALYSIS_DESC", "autoWidth": true },
                    { "data": "T_QREST_REF_PAR_METHODS.REFERENCE_METHOD_ID", "name": "T_QREST_REF_PAR_METHODS.REFERENCE_METHOD_ID", "autoWidth": true },
                    { "data": "T_QREST_REF_PAR_METHODS.EQUIVALENT_METHOD", "name": "T_QREST_REF_PAR_METHODS.EQUIVALENT_METHOD", "autoWidth": true }
                ],
                "createdRow": function (row, data, dataIndex) {
                    $('td:eq(0)', row).css('width', '90px');
                    $('td:eq(0)', row).css('min-width', '90px');
                    $('td:eq(0)', row).css('padding-right', '0px');
                    $('td:eq(0)', row).css('white-space', 'nowrap');
                }
            });

            //select a par/method
            $(document).on("click", ".par-meth-sel", function () {
                $('#PAR_METHOD_IDX').val($(this).data('id'));
                $('#txtParMethodTemp').val($(this).data('par') + " / " + $(this).data('meth'));
                $('#COLLECT_UNIT_CODE').val($(this).data('unit'));

                $('#modal-form').modal('toggle');
            });


            //set units
            var unit = $("#COLLECT_UNIT_CODE option:selected").text();
            $("#unit1").text(unit);
            $("#unit2").text(unit);
            $("#unit3").text(unit);



        });

        $("#COLLECT_UNIT_CODE").change(function () {
            var unit = $("#COLLECT_UNIT_CODE option:selected").text();
            $("#unit1").text(unit);
            $("#unit2").text(unit);
            $("#unit3").text(unit);

        });
    </script>

}