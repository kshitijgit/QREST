@model QREST.Models.vmDataRaw
@{
    ViewBag.Title = "Raw Data";
    ViewBag.HideTitle = true;
}

<section class="panel panel-qrest">
    <header class="panel-heading font-bold">Raw Data</header>
    @if (Model.ddl_Organization.Count() > 0)
    {
        <div class="panel-body">
            <form class="form-inline m-b-sm" onsubmit="return false">
                @Html.DropDownListFor(model => model.selOrgID, Model.ddl_Organization, new { @class = "form-control" })
                @Html.DropDownListFor(model => model.selMon, Model.ddl_Monitor, "", new { @class = "form-control" })
                <select id="selType" class="form-control">
                    <option value="H">Hourly</option>
                    <option value="F">5-Minute</option>
                </select>
                <input id="selDate" name="selDate" class="form-control" style="width:300px" data-start="" data-end="" />
                <button id="btnGo" class="btn  btn-primary">Go</button>

                <div class="btn-group pull-right" data-toggle="buttons">
                    <label id="btnChartToggle" class="btn btn-default btn-rounded active" data-target="#chartContainer" data-toggle="collapse">
                        <input type="checkbox" name="options" id="option1"><i class="fa fa-check text-active"></i> <span><i class="fa fa-line-chart"></i></span>
                    </label>
                    <label class="btn btn-default btn-rounded active" data-target="#gridContainer" data-toggle="collapse">
                        <input type="checkbox" name="options" id="option1"><i class="fa fa-check text-active"></i> <span><i class="fa fa-table"></i></span>
                    </label>
                </div>

            </form>

            <div id="chartContainer" class="collapse in" style="height: 370px; width: 100%;">
            </div>
            <div id="gridContainer" class="table-responsive collapse in">
                <table id="gridData" class="table table-striped table-bordered" data-ride="datatables" style="width:100%">
                    <thead>
                        <tr>
                            <th>Site</th>
                            <th>Par Code</th>
                            <th>Parameter</th>
                            <th>POC</th>
                            <th>Time UTC</th>
                            <th>Value</th>
                            <th>Flagged</th>
                        </tr>
                    </thead>
                </table>
            </div>




        </div>
    }
    else
    {
        <div class="panel-body">You can manage sites after you have been associated with a tribal organization.</div>
    }
</section>




@section Scripts {
    @Scripts.Render("~/bundles/datatables")
    @Scripts.Render("~/bundles/canvasjs")

    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />

    <script type="text/javascript">
        $(document).ready(function () {

            moment.updateLocale(moment.locale(), { invalidDate: "" });

            //daterange selector initialization
                $('input[name="selDate"]').daterangepicker({
                    timePicker: true,
                    timePickerIncrement: 60,
                    timePicker24Hour: true,
                    autoUpdateInput: true,
                    startDate: moment().startOf('hour').add(-1, 'day'),
                    endDate: moment().startOf('hour').add(10, 'hour'),
                    ranges: {
                       'Today': [moment(), moment()],
                       'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                       'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                       'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                       'This Month': [moment().startOf('month'), moment().endOf('month')],
                       'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                    },
                    locale: {
                        format: 'M/DD/YYYY HH:00'
                    }
                }
                    , function (start, end, label) {
                        $('#selDate').data('start', start.format('YYYY-MM-DD'));
                        $('#selDate').data('end', end.format('YYYY-MM-DD'));
                    }
                );

            // datatable initialization
            var table = $("#gridData").DataTable({
                "responsive": true,
                "serverSide": true,
                "processing": true,
                "orderMulti": false,
                "lengthChange": false,
                "paging": true,
                "pageLength": 50,
                "pagingType": "full_numbers",
                "info": false,
                "searching": false,
                "ajax": {
                    "url": "@Url.Action("RawData", "Data")",
                    "type": "POST",
                    "datatype": "json",
                    "error": function (e) {},
                    "data": function (d) {
                        return $.extend({}, d, {
                            "selOrg": $('#selOrgID').val(),
                            "selType": $('#selType').val(),
                            "selDate": $('#selDate').val(),
                            "selMon": $('#selMon').val()
                        });
                    }
                },
                "order": [[0, "desc"]],
                "columns": [
                    { "data": "SITE_ID", "name": "SITE_ID", "autoWidth": true },
                    { "data": "PAR_CODE", "name": "PAR_CODE", "autoWidth": true },
                    { "data": "PAR_NAME", "name": "PAR_NAME", "autoWidth": true },
                    { "data": "POC", "name": "POC", "autoWidth": true },
                    {
                        "data": "DATA_DTTM",
                        "name": "DATA_DTTM",
                        "autoWidth": true,
                        render: function (d) {
                            return moment(d).utc().format("MM/DD/YYYY hh:mm A ");
                        }
                    },
                    { "data": "DATA_VALUE", "name": "DATA_VALUE", "autoWidth": true },
                    { "data": "VAL_CD", "name": "VAL_CD", "autoWidth": true }
                ],
                fnDrawCallback: function (oSettings) {
                    var totalPages = this.api().page.info().pages;
                    if (totalPages == 1) {
                        jQuery('.dataTables_paginate').hide();
                    }
                    else {
                        jQuery('.dataTables_paginate').show();
                    }
                }
            });

            //filter click
            $('#btnGo').on('click', function () {

                table.draw();

                getDataChart();
            })


            $('#chartContainer').on("shown.bs.collapse", function () {
                getDataChart();
                $("#chartContainer").height(400);
                // $('#btnChartToggle').off(); // to remove the binded event after the initial rendering if needed
            });


            //update monitor dropdown
            var url = '@Url.Action("FetchMonitors")';
            var mons = $('#selMon');
            $('#selOrgID').change(function () {

                mons.empty();
                $.getJSON(url, { ID: $(this).val() }, function (data) {
                    if (!data) {
                        return;
                    }
                    mons.append($('<option></option>').val('').text('Please select'));
                    $.each(data, function (index, item) {
                        mons.append($('<option></option>').val(item.Value).text(item.Text));
                    });
                });
            });

        });

        function getDataChart() {

            var dataPointsA = [];
            var parName;

            $.ajax({
                type: "POST",
                datatype: "json",
                url: "@Url.Action("RawDataChart", "Data")",
                data: jQuery.param({
                    selOrg: $('#selOrgID').val(),
                    selType: $('#selType').val(),
                    selDate: $('#selDate').val(),
                    selMon: $('#selMon').val()
                }),
                success: function (field) {
                    var fff = $.parseJSON(field.data);
                    if (fff != null) {
                        var lcolor="blue";
                        for (var i = 0; i < fff.length; i++) {
                            if (fff[i].DATA_VALUE == "FEW") {
                                lcolor = "#ffee8c";
                            }
                            else if (fff[i].VAL_CD == "MIN") {
                                lcolor = "#d32d41";
                            }
                            else if (fff[i].VAL_CD == "MAX") {
                                lcolor = "#d32d41";
                            }
                            else if (fff[i].VAL_CD == "JUMP") {
                                lcolor = "#6F2DA7";
                            }
                            else {
                                lcolor = "#67B347";
                            }
                                dataPointsA.push({
                                    x: new Date(fff[i].DATA_DTTM),
                                    y: fff[i].DATA_VALUE == "FEW" ? 0 : Number(fff[i].DATA_VALUE),

                                    lineColor: lcolor,
                                    color:lcolor
                                    
                                });
                            parName = fff[i].PAR_NAME;
                        }

                        var chart = new CanvasJS.Chart("chartContainer", {
                            zoomEnabled: true,
                            animationEnabled: true,
                            title: {
                                text: parName
                            },
                            data: [{
                                type: "column",
//                                color: 'rgb(90, 220, 0)',
                                connectNullData: false,
                                xValueType: "dateTime",
                                xValueFormatString: "MM/DD/YYYY HH:mm",
                                name: "line1",
                                dataPoints: dataPointsA
                            }]
                        });

                        //setColor(chart);
                        chart.render();
                    }
                }
            });

        }

        function setColor(chart) {
            for (var i = 0; i < chart.options.data.length; i++) {
                dataSeries = chart.options.data[i];
                for (var j = 0; j < dataSeries.dataPoints.length; j++){
                    if (dataSeries.dataPoints[j].y <= 0.5)
                        dataSeries.dataPoints[j].color = 'rgb(170, 0, 0)';
                }
            }
        }
    </script>



}